"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/flashcards/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: () => (/* binding */ apiClient)\n/* harmony export */ });\n/// <reference types=\"node\" />\nconst API_BASE_URL = \"/api\";\nclass ApiClient {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(API_BASE_URL).concat(endpoint);\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n                ...options.headers\n            },\n            ...options\n        };\n        try {\n            const response = await fetch(url, config);\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"API request failed:\", error);\n            throw error;\n        }\n    }\n    // Flashcard CRUD operations\n    async getFlashcards(subject, search) {\n        const params = new URLSearchParams();\n        if (subject) params.append(\"subject\", subject);\n        if (search) params.append(\"search\", search);\n        const query = params.toString() ? \"?\".concat(params.toString()) : \"\";\n        return this.request(\"/flashcards\".concat(query));\n    }\n    async getFlashcard(id) {\n        return this.request(\"/flashcards/\".concat(id));\n    }\n    async createFlashcard(flashcard) {\n        return this.request(\"/flashcards\", {\n            method: \"POST\",\n            body: JSON.stringify(flashcard)\n        });\n    }\n    async updateFlashcard(id, flashcard) {\n        return this.request(\"/flashcards/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(flashcard)\n        });\n    }\n    async deleteFlashcard(id) {\n        return this.request(\"/flashcards/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    // Study session operations\n    async getStudySession(subject) {\n        const params = new URLSearchParams();\n        if (subject) params.append(\"subject\", subject);\n        const query = params.toString() ? \"?\".concat(params.toString()) : \"\";\n        return this.request(\"/study/session\".concat(query));\n    }\n    async updateFlashcardProgress(flashcardId, correct) {\n        return this.request(\"/study/progress\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                flashcard_id: flashcardId,\n                correct\n            })\n        });\n    }\n    async getFlashcardProgress() {\n        return this.request(\"/study/progress\");\n    }\n    // AI-powered study optimization\n    async getOptimizedStudyOrder(flashcards) {\n        return this.request(\"/study/optimize\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                flashcards\n            })\n        });\n    }\n    async generateHint(flashcard) {\n        return this.request(\"/study/hint\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                flashcard\n            })\n        });\n    }\n    // Analytics\n    async getStudyAnalytics(timeframe) {\n        const params = new URLSearchParams();\n        if (timeframe) params.append(\"timeframe\", timeframe);\n        const query = params.toString() ? \"?\".concat(params.toString()) : \"\";\n        return this.request(\"/analytics\".concat(query));\n    }\n}\nconst apiClient = new ApiClient();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBYyxtQkFBbUI7WUFDbEQ0QixRQUFRO1lBQ1JDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztnQkFBRVU7WUFBVztRQUNwQztJQUNGO0lBRUEsTUFBTUMsYUFBYWYsU0FBb0IsRUFBMEM7UUFDL0UsT0FBTyxJQUFJLENBQUMzQixPQUFPLENBQW1CLGVBQWU7WUFDbkQ0QixRQUFRO1lBQ1JDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztnQkFBRUo7WUFBVTtRQUNuQztJQUNGO0lBRUEsWUFBWTtJQUNaLE1BQU1nQixrQkFBa0JDLFNBQXFDLEVBYTNEO1FBQ0EsTUFBTXpCLFNBQVMsSUFBSUM7UUFDbkIsSUFBSXdCLFdBQVd6QixPQUFPRSxNQUFNLENBQUMsYUFBYXVCO1FBRTFDLE1BQU10QixRQUFRSCxPQUFPSSxRQUFRLEtBQUssSUFBc0IsT0FBbEJKLE9BQU9JLFFBQVEsTUFBTztRQUM1RCxPQUFPLElBQUksQ0FBQ3ZCLE9BQU8sQ0FBQyxhQUFtQixPQUFOc0I7SUFDbkM7QUFDRjtBQUVPLE1BQU11QixZQUFZLElBQUk5QyxZQUFXIiwic291cmNlcyI6WyJDOlxcU0RLXFxmbGFzaG1pbmRcXGxpYlxcYXBpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwibm9kZVwiIC8+XHJcblxyXG5jb25zdCBBUElfQkFTRV9VUkwgPSBcIi9hcGlcIlxyXG5cclxuaW50ZXJmYWNlIEFwaVJlc3BvbnNlPFQ+IHtcclxuICBkYXRhOiBUXHJcbiAgbWVzc2FnZT86IHN0cmluZ1xyXG4gIHN1Y2Nlc3M6IGJvb2xlYW5cclxufVxyXG5cclxuaW50ZXJmYWNlIEZsYXNoY2FyZCB7XHJcbiAgaWQ6IG51bWJlclxyXG4gIGZyb250OiBzdHJpbmdcclxuICBiYWNrOiBzdHJpbmdcclxuICBzdWJqZWN0OiBzdHJpbmdcclxuICBjcmVhdGVkX2F0OiBzdHJpbmdcclxuICB1cGRhdGVkX2F0OiBzdHJpbmdcclxuICB0aW1lc19zZWVuOiBudW1iZXJcclxuICB0aW1lc193cm9uZzogbnVtYmVyXHJcbiAgbGFzdF9zZWVuOiBzdHJpbmcgfCBudWxsXHJcbn1cclxuXHJcbmludGVyZmFjZSBGbGFzaGNhcmRQcm9ncmVzcyB7XHJcbiAgZmxhc2hjYXJkX2lkOiBudW1iZXJcclxuICB0aW1lc19zZWVuOiBudW1iZXJcclxuICB0aW1lc193cm9uZzogbnVtYmVyXHJcbiAgbGFzdF9zZWVuOiBzdHJpbmdcclxuICBhY2N1cmFjeV9yYXRlOiBudW1iZXJcclxufVxyXG5cclxuY2xhc3MgQXBpQ2xpZW50IHtcclxuICBwcml2YXRlIGFzeW5jIHJlcXVlc3Q8VD4oZW5kcG9pbnQ6IHN0cmluZywgb3B0aW9uczogUmVxdWVzdEluaXQgPSB7fSk6IFByb21pc2U8QXBpUmVzcG9uc2U8VD4+IHtcclxuICAgIGNvbnN0IHVybCA9IGAke0FQSV9CQVNFX1VSTH0ke2VuZHBvaW50fWBcclxuXHJcbiAgICBjb25zdCBjb25maWc6IFJlcXVlc3RJbml0ID0ge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAuLi5vcHRpb25zLmhlYWRlcnMsXHJcbiAgICAgIH0sXHJcbiAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIGNvbmZpZylcclxuXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YClcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxyXG4gICAgICByZXR1cm4gZGF0YVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkFQSSByZXF1ZXN0IGZhaWxlZDpcIiwgZXJyb3IpXHJcbiAgICAgIHRocm93IGVycm9yXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBGbGFzaGNhcmQgQ1JVRCBvcGVyYXRpb25zXHJcbiAgYXN5bmMgZ2V0Rmxhc2hjYXJkcyhzdWJqZWN0Pzogc3RyaW5nLCBzZWFyY2g/OiBzdHJpbmcpOiBQcm9taXNlPEFwaVJlc3BvbnNlPEZsYXNoY2FyZFtdPj4ge1xyXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpXHJcbiAgICBpZiAoc3ViamVjdCkgcGFyYW1zLmFwcGVuZChcInN1YmplY3RcIiwgc3ViamVjdClcclxuICAgIGlmIChzZWFyY2gpIHBhcmFtcy5hcHBlbmQoXCJzZWFyY2hcIiwgc2VhcmNoKVxyXG5cclxuICAgIGNvbnN0IHF1ZXJ5ID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBgPyR7cGFyYW1zLnRvU3RyaW5nKCl9YCA6IFwiXCJcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3Q8Rmxhc2hjYXJkW10+KGAvZmxhc2hjYXJkcyR7cXVlcnl9YClcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldEZsYXNoY2FyZChpZDogbnVtYmVyKTogUHJvbWlzZTxBcGlSZXNwb25zZTxGbGFzaGNhcmQ+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PEZsYXNoY2FyZD4oYC9mbGFzaGNhcmRzLyR7aWR9YClcclxuICB9XHJcblxyXG4gIGFzeW5jIGNyZWF0ZUZsYXNoY2FyZChcclxuICAgIGZsYXNoY2FyZDogT21pdDxGbGFzaGNhcmQsIFwiaWRcIiB8IFwiY3JlYXRlZF9hdFwiIHwgXCJ1cGRhdGVkX2F0XCIgfCBcInRpbWVzX3NlZW5cIiB8IFwidGltZXNfd3JvbmdcIiB8IFwibGFzdF9zZWVuXCI+LFxyXG4gICk6IFByb21pc2U8QXBpUmVzcG9uc2U8Rmxhc2hjYXJkPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxGbGFzaGNhcmQ+KFwiL2ZsYXNoY2FyZHNcIiwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmbGFzaGNhcmQpLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZUZsYXNoY2FyZChpZDogbnVtYmVyLCBmbGFzaGNhcmQ6IFBhcnRpYWw8Rmxhc2hjYXJkPik6IFByb21pc2U8QXBpUmVzcG9uc2U8Rmxhc2hjYXJkPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxGbGFzaGNhcmQ+KGAvZmxhc2hjYXJkcy8ke2lkfWAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmbGFzaGNhcmQpLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZUZsYXNoY2FyZChpZDogbnVtYmVyKTogUHJvbWlzZTxBcGlSZXNwb25zZTx2b2lkPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDx2b2lkPihgL2ZsYXNoY2FyZHMvJHtpZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAvLyBTdHVkeSBzZXNzaW9uIG9wZXJhdGlvbnNcclxuICBhc3luYyBnZXRTdHVkeVNlc3Npb24oc3ViamVjdD86IHN0cmluZyk6IFByb21pc2U8QXBpUmVzcG9uc2U8Rmxhc2hjYXJkW10+PiB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKClcclxuICAgIGlmIChzdWJqZWN0KSBwYXJhbXMuYXBwZW5kKFwic3ViamVjdFwiLCBzdWJqZWN0KVxyXG5cclxuICAgIGNvbnN0IHF1ZXJ5ID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBgPyR7cGFyYW1zLnRvU3RyaW5nKCl9YCA6IFwiXCJcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3Q8Rmxhc2hjYXJkW10+KGAvc3R1ZHkvc2Vzc2lvbiR7cXVlcnl9YClcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZUZsYXNoY2FyZFByb2dyZXNzKGZsYXNoY2FyZElkOiBudW1iZXIsIGNvcnJlY3Q6IGJvb2xlYW4pOiBQcm9taXNlPEFwaVJlc3BvbnNlPEZsYXNoY2FyZFByb2dyZXNzPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxGbGFzaGNhcmRQcm9ncmVzcz4oXCIvc3R1ZHkvcHJvZ3Jlc3NcIiwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgZmxhc2hjYXJkX2lkOiBmbGFzaGNhcmRJZCxcclxuICAgICAgICBjb3JyZWN0LFxyXG4gICAgICB9KSxcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRGbGFzaGNhcmRQcm9ncmVzcygpOiBQcm9taXNlPEFwaVJlc3BvbnNlPEZsYXNoY2FyZFByb2dyZXNzW10+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PEZsYXNoY2FyZFByb2dyZXNzW10+KFwiL3N0dWR5L3Byb2dyZXNzXCIpXHJcbiAgfVxyXG5cclxuICAvLyBBSS1wb3dlcmVkIHN0dWR5IG9wdGltaXphdGlvblxyXG4gIGFzeW5jIGdldE9wdGltaXplZFN0dWR5T3JkZXIoZmxhc2hjYXJkczogRmxhc2hjYXJkW10pOiBQcm9taXNlPEFwaVJlc3BvbnNlPEZsYXNoY2FyZFtdPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxGbGFzaGNhcmRbXT4oXCIvc3R1ZHkvb3B0aW1pemVcIiwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGZsYXNoY2FyZHMgfSksXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2VuZXJhdGVIaW50KGZsYXNoY2FyZDogRmxhc2hjYXJkKTogUHJvbWlzZTxBcGlSZXNwb25zZTx7IGhpbnQ6IHN0cmluZyB9Pj4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDx7IGhpbnQ6IHN0cmluZyB9PihcIi9zdHVkeS9oaW50XCIsIHtcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBmbGFzaGNhcmQgfSksXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgLy8gQW5hbHl0aWNzXHJcbiAgYXN5bmMgZ2V0U3R1ZHlBbmFseXRpY3ModGltZWZyYW1lPzogXCJ3ZWVrXCIgfCBcIm1vbnRoXCIgfCBcInllYXJcIik6IFByb21pc2U8XHJcbiAgICBBcGlSZXNwb25zZTx7XHJcbiAgICAgIHRvdGFsX2NhcmRzOiBudW1iZXJcclxuICAgICAgdG90YWxfc2Vzc2lvbnM6IG51bWJlclxyXG4gICAgICBhdmVyYWdlX2FjY3VyYWN5OiBudW1iZXJcclxuICAgICAgY2FyZHNfbWFzdGVyZWQ6IG51bWJlclxyXG4gICAgICBzdHVkeV9zdHJlYWs6IG51bWJlclxyXG4gICAgICBzdWJqZWN0X2JyZWFrZG93bjogQXJyYXk8e1xyXG4gICAgICAgIHN1YmplY3Q6IHN0cmluZ1xyXG4gICAgICAgIGNhcmRfY291bnQ6IG51bWJlclxyXG4gICAgICAgIGFjY3VyYWN5OiBudW1iZXJcclxuICAgICAgfT5cclxuICAgIH0+XHJcbiAgPiB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKClcclxuICAgIGlmICh0aW1lZnJhbWUpIHBhcmFtcy5hcHBlbmQoXCJ0aW1lZnJhbWVcIiwgdGltZWZyYW1lKVxyXG5cclxuICAgIGNvbnN0IHF1ZXJ5ID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBgPyR7cGFyYW1zLnRvU3RyaW5nKCl9YCA6IFwiXCJcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoYC9hbmFseXRpY3Mke3F1ZXJ5fWApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYXBpQ2xpZW50ID0gbmV3IEFwaUNsaWVudCgpXHJcbmV4cG9ydCB0eXBlIHsgRmxhc2hjYXJkLCBGbGFzaGNhcmRQcm9ncmVzcywgQXBpUmVzcG9uc2UgfVxyXG4iXSwibmFtZXMiOlsiQVBJX0JBU0VfVVJMIiwiQXBpQ2xpZW50IiwicmVxdWVzdCIsImVuZHBvaW50Iiwib3B0aW9ucyIsInVybCIsImNvbmZpZyIsImhlYWRlcnMiLCJBY2NlcHQiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJFcnJvciIsInN0YXR1cyIsImRhdGEiLCJqc29uIiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0Rmxhc2hjYXJkcyIsInN1YmplY3QiLCJzZWFyY2giLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJxdWVyeSIsInRvU3RyaW5nIiwiZ2V0Rmxhc2hjYXJkIiwiaWQiLCJjcmVhdGVGbGFzaGNhcmQiLCJmbGFzaGNhcmQiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInVwZGF0ZUZsYXNoY2FyZCIsImRlbGV0ZUZsYXNoY2FyZCIsImdldFN0dWR5U2Vzc2lvbiIsInVwZGF0ZUZsYXNoY2FyZFByb2dyZXNzIiwiZmxhc2hjYXJkSWQiLCJjb3JyZWN0IiwiZmxhc2hjYXJkX2lkIiwiZ2V0Rmxhc2hjYXJkUHJvZ3Jlc3MiLCJnZXRPcHRpbWl6ZWRTdHVkeU9yZGVyIiwiZmxhc2hjYXJkcyIsImdlbmVyYXRlSGludCIsImdldFN0dWR5QW5hbHl0aWNzIiwidGltZWZyYW1lIiwiYXBpQ2xpZW50Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});